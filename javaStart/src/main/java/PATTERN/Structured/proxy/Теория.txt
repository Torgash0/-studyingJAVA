суть патерна в том что она вклинивается между двумя классами и добовляет свой функционал

Заместитель — это объект, который выступает прослойкой между клиентом и реальным сервисным объектом. Заместитель получает
вызовы от клиента, выполняет свою функцию (контроль доступа, кеширование, изменение запроса и прочее), а затем передаёт вызов сервисному объекту.
Заместитель имеет тот же интерфейс, что и реальный объект, поэтому для клиента нет разницы — работать через заместителя или напрямую.

Заместитель — это структурный паттерн проектирования, который позволяет подставлять вместо реальных объектов специальные
объекты-заменители. Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригиналу.

Применимость: Паттерн Заместитель применяется в Java коде тогда, когда надо заменить настоящий объект его суррогатом,
причём незаметно для клиентов настоящего объекта. Это позволит выполнить какие-то добавочные поведения до или после основного
поведения настоящего объекта.
Примеры Заместителя в стандартных библиотеках Java:
java.lang.reflect.Proxy
java.rmi.*
javax.ejb.EJB (см. комментарии)
javax.inject.Inject (см. комментарии)
javax.persistence.PersistenceContext
Признаки применения паттерна: Класс заместителя чаще всего делегирует всю настоящую работу своему реальному объекту.
Заместители часто сами следят за жизненным циклом своего реального объекта.
