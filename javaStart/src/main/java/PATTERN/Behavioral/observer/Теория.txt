суть паттерна в том , чтоб обькиф общвлись между друг другом
// есть готовое исполнение от java (Observer и Observable(это где содержится наш список

Наблюдатель — это поведенческий паттерн, который позволяет объектам оповещать другие объекты об изменениях своего состояния.
При этом наблюдатели могут свободно подписываться и отписываться от этих оповещений.

Применимость: Наблюдатель можно часто встретить в Java коде, особенно там, где применяется событийная модель отношений
между компонентами. Наблюдатель позволяет отдельным компонентам реагировать на события, происходящие в других компонентах.
Примеры Наблюдателя в стандартных библиотеках Java:
java.util.Observer/java.util.Observable (редко используется в реальной жизни)
Все реализации java.util.EventListener (практически во всём Swing-е)
javax.servlet.http.HttpSessionBindingListener
javax.servlet.http.HttpSessionAttributeListener
javax.faces.event.PhaseListener
Признаки применения паттерна: Наблюдатель можно определить по механизму подписки и методам оповещения, которые вызывают
компоненты программы.

Подписка и оповещения
В этом примере Наблюдатель используется для передачи событий между объектами текстового редактора. Всякий раз когда объект
редактора меняет своё состояние, он оповещает своих наблюдателей. Объекты EmailNotificationListener и LogOpenListener
следят за этими уведомлениями и выполняют полезную работу в ответ.
Классы подписчиков не связаны с классом редактора и могут быть повторно использованы в других приложениях если потребуется.
Класс Editor зависит только от общего интерфейса подписчиков. Это позволяет добавлять новые типы подписчиков не меняя
существующего кода редактора.