суть паттерна в том , что


Стратегия — это поведенческий паттерн, выносит набор алгоритмов в собственные классы и делает их взаимозаменимыми.
Другие объекты содержат ссылку на объект-стратегию и делегируют ей работу. Программа может подменить этот объект другим,
если требуется иной способ решения задачи.

Применимость: Стратегия часто используется в Java-коде, особенно там, где нужно подменять алгоритм во время выполнения
программы. Начиная с Java 8, многие примеры стратегии можно заменить простыми lambda-выражениями.
Примеры Стратегии в стандартных библиотеках Java:
java.util.Comparator#compare(), вызываемые из Collections#sort().
javax.servlet.http.HttpServlet: метод service(), а также все методы doXXX() принимают объекты HttpServletRequest и
HttpServletResponse в параметрах.
javax.servlet.Filter#doFilter()

Признаки применения паттерна: Класс делегирует выполнение вложенному объекту абстрактного типа или интерфейса.
Методы оплаты в интернет магазине
В этом примере Стратегия реализует выбор платёжного метода в интернет магазине. Когда пользователь сформировал заказ, он
получает выбор из нескольких платёжных стредств: электронного кошелька или кредитной карты.

В данном случае конкретные стратегии платёжных методов не только проводят саму оплату, но и собирают необходимые данные на форме заказа.

