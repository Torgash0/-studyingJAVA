list хранит эелемнты в порядке их жобавления
queue хранит элементы в пордяке лучшем для их реализации
set множества уникальных обьектов (двух обьектов одинаковых не может быть)
(не входитт в интерфейс коллектион) map хранит обьекты ввиде ключ значения

List работает по принципу массива , хранит в порядке добавления
ArrayList<E> - на базе массива ( часто используется)
плюсы : быстрый поиск по индексу, быстрая вставка и удаление с конца
минусы : медленная вставка и удлаение элементов
используется когда важно читать/писать , но не добавлять/удалять 
LinkedList<E> на базе двухсвязного списка  ( часто используется)
реализован ввиде двухсвзяннаого списка, элементы хранят ссылки на предыдущий и на следющий элемент
плюсы : быстрое доавбление и удаление элементов
минусы : медленный доступ по индексу
используется когд нужно меого добавлять/удалять . но не чиать и писать по середине
Vector<E> - вектор
Stack<E> - стек


set<E> это коллекция без повторяющихся элементов

HashSet<E> - не упорядоченное множество на основе хеш кода
самый быстрый , давет константное вреся для add() добавить, remove() удалить, cintains() найти/содержеться такой
элемент,size() размер
порядка не гарантирует ( при каждом запуске может меняться)
КОГДА ВАЖНА СКОРОСТЬ

TreeSet<E> - упорядоченное множество , элементы которого отсортированы в порядке возрастания
время базовых операций дольше - log(n)
гарантирует порядок элементов ( соритирует)
не предоставляет каких либо параментров для настройки
предоставляет дополнительные методы для списка : first(), last(), headSet(), tailSet()
ИСПОЛЬЗОВАТЬ КОГДА ВАЖНА СОРТИРОВКА , скорость зависит от размера
КРАСНО-БЕЛЫЕ ДЕРЕВЬЯ

LinkedHashSet<E> - упордоченный HashSet, эдементы храняться в порядке добавления
расширяет HashSet
список элементов упорядоченный
ИСПОЛЬЗУЕТСЯ КОГДА ВАЖЕН ПОРЯДОК , А НЕ СКОРОСТЬ

Queue<E> - очередь (хранилеще элементов для обработки) (new LinkedList)
свойства: FirstIn - FirstOut, может быть ограниченный размер

Deque<E> extends Queue<E> - двунаправленная очередь
стек или LiFo


ВАЖНО ОЧЕНЬ!!!!!!!
Iterator -  предназначен для обхода коллекций
методы:
hasNext() - определяет есть ли следующий элемент
next() - берет текующий элемент и переносит курсор на следующий элемент
remove() - удаляет элемент


https://drive.google.com/file/d/1ORQjoW8sR4hhCcTZU2RmFHu9SvkmSP9z/view