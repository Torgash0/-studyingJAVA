    В контексте программирования, "runnable" и "callable" являются терминами, используемыми для описания способа выполнения кода.
    Runnable относится к объекту, который может быть запущен в отдельном потоке выполнения. Это означает, что код,
помеченный как "runnable", может быть выполнен параллельно с другими частями программы.
    Callable относится к объекту, который может быть вызван или выполнен в определенный момент времени.
    Это обычно используется для выполнения функций или методов в определенном порядке или при определенных условиях.
    Таким образом, основное отличие между runnable и callable заключается в том, что runnable относится к параллельному выполнению кода,
в то время как callable относится к вызываемому или выполнимому коду в определенный момент времени.


    Выбор между использованием Runnable и Callable зависит от конкретной задачи, которую вы пытаетесь выполнить.
    Если вам нужно выполнить какую-то операцию параллельно с основным потоком выполнения программы, то лучше использовать интерфейс Runnable.
    Например, если у вас есть длительная операция, которая не должна блокировать пользовательский интерфейс,
то вы можете создать объект Runnable для выполнения этой операции в фоновом потоке.
    С другой стороны, если у вас есть задача, которая должна вернуть результат или бросить исключение, то лучше использовать интерфейс Callable.
    Например, если у вас есть задача, которая должна вычислить какое-то значение и вернуть его,
 то вы можете создать объект Callable для выполнения этой задачи и получения результата.
    В общем случае, если у вас нет необходимости возвращать результат или обрабатывать исключения из задачи, то можно использовать Runnable.
    Если же вам нужно получить результат или обработать исключения, то лучше использовать Callable.


    что такое Future
    Future в Java представляет собой интерфейс, который представляет результат асинхронной операции. Он используется для получения результата выполнения задачи,
которая может занять некоторое время.
    Future позволяет выполнять асинхронные операции, не блокируя основной поток выполнения. Это особенно полезно в многопоточных приложениях,
где можно запустить несколько задач параллельно и получить результаты их выполнения по мере готовности.
    Future также обеспечивает возможность проверить, завершилась ли задача успешно или произошла ошибка во время выполнения.
Таким образом, Future в Java позволяет эффективно управлять асинхронными операциями и получать результаты их выполнения без блокировки основного потока выполнения.
пример в callableProject


В Java метод super.notifyAll() вызывает метод notifyAll() у родительского класса текущего объекта.
Метод notifyAll() используется для уведомления всех потоков, которые ожидают на данном объекте с помощью метода wait(), что состояние объекта изменилось и они могут продолжить свою работу.
Вызов super.notifyAll() может быть полезен, если в дочернем классе переопределен метод notifyAll(), и требуется вызвать реализацию родительского класса.

notifyAll() в Java используется для оповещения всех потоков, которые ожидают на объекте блокировки, что объект может быть готов к использованию.

Когда поток вызывает метод wait() на объекте блокировки, он переходит в состояние ожидания, пока другой поток не вызовет метод notify() или notifyAll() на этом объекте. Когда это происходит, поток просыпается и продолжает выполнение.

Метод notify() оповещает только один поток, который ожидает на объекте блокировки. В то время как метод notifyAll() оповещает все потоки, которые ожидают на объекте блокировки.

Пример использования метода notifyAll():

public class MyThread extends Thread {
    private final Object lock;

    public MyThread(Object lock) {
        this.lock = lock;
    }

    @Override
    public void run() {
        synchronized (lock) {
            System.out.println("Thread " + Thread.currentThread().getId() + " is waiting...");
            try {
                lock.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Thread " + Thread.currentThread().getId() + " is awake!");
        }
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Object lock = new Object();

        for (int i = 0; i < 5; i++) {
            new MyThread(lock).start();
        }

        Thread.sleep(2000); // ждем 2 секунды

        synchronized (lock) {
            lock.notifyAll(); // оповещаем все потоки, которые ждут на объекте lock
        }
    }
}

В этом примере мы создаем несколько потоков, которые ожидают на объекте lock с помощью метода wait(). Затем мы вызываем метод notifyAll() на объекте lock, чтобы оповестить все потоки, которые ждут на этом объекте. Как только это происходит, все потоки просыпаются и продолжают выполнение.


Класс Phaser позволяет синхронизировать потоки, представляющие отдельную фазу или стадию выполнения общего действия. Phaser определяет объект синхронизации, который ждет, пока не завершится определенная фаза. Затем Phaser переходит к следующей стадии или фазе и снова ожидает ее завершения.

Для создания объекта Phaser используется один из конструкторов:

1
2
3
4
Phaser()
Phaser(int parties)
Phaser(Phaser parent)
Phaser(Phaser parent, int parties)
Параметр parties указывает на количество участников (грубо говоря, потоков), которые должны выполнять все фазы действия. Первый конструктор создает объект Phaser без каких-либо участников. Второй конструктор регистрирует передаваемое в конструктор количество участников. Третий и четвертый конструкторы также устанавливают родительский объект Phaser.

Основные методы класса Phaser:

int register(): регистрирует участника, который выполняет фазы, и возвращает номер текущей фазы - обычно фаза 0

int arrive(): сообщает, что участник завершил фазу, и возвращает номер текущей фазы

int arriveAndAwaitAdvance(): аналогичен методу arrive, только при этом заставляет phaser ожидать завершения фазы всеми остальными участниками

int arriveAndDeregister(): сообщает о завершении всех фаз участником и снимает его с регистрации. Возвращает номер текущей фазы или отрицательное число, если синхронизатор Phaser завершил свою работу

int getPhase(): возвращает номер текущей фазы

При работае с классом Phaser обычно сначала создается его объект. Далее нам надо зарегистрировать всех участников. Для регистрации для каждоого участника вызывается метод register(), либо можно обойтись и без этого метода, передав нужное количество участников в конструктор Phaser.

Затем каждый участник выполняет некоторый набор действий, составляющих фазу. А синхронизатор Phaser ждет, пока все участники не завершат выполнение фазы. Чтобы сообщить синхронизатору, что фаза завершена, участник должен вызвать метод arrive() или arriveAndAwaitAdvance(). После этого синхронизатор переходит к следующей фазе.