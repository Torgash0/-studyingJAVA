 Выбор между использованием Runnable и Callable зависит от конкретной задачи, которую вы пытаетесь выполнить.
    Если вам нужно выполнить какую-то операцию параллельно с основным потоком выполнения программы, то лучше использовать интерфейс Runnable.
    Например, если у вас есть длительная операция, которая не должна блокировать пользовательский интерфейс,
то вы можете создать объект Runnable для выполнения этой операции в фоновом потоке.
    С другой стороны, если у вас есть задача, которая должна вернуть результат или бросить исключение, то лучше использовать интерфейс Callable.
    Например, если у вас есть задача, которая должна вычислить какое-то значение и вернуть его,
 то вы можете создать объект Callable для выполнения этой задачи и получения результата.
    В общем случае, если у вас нет необходимости возвращать результат или обрабатывать исключения из задачи, то можно использовать Runnable.
    Если же вам нужно получить результат или обработать исключения, то лучше использовать Callable.


    что такое Future
    Future в Java представляет собой интерфейс, который представляет результат асинхронной операции. Он используется для получения результата выполнения задачи,
которая может занять некоторое время.
    Future позволяет выполнять асинхронные операции, не блокируя основной поток выполнения. Это особенно полезно в многопоточных приложениях,
где можно запустить несколько задач параллельно и получить результаты их выполнения по мере готовности.
    Future также обеспечивает возможность проверить, завершилась ли задача успешно или произошла ошибка во время выполнения.
Таким образом, Future в Java позволяет эффективно управлять асинхронными операциями и получать результаты их выполнения без блокировки основного потока выполнения.
пример в callableProject



ExecutorService - это удобный инструмент для управления потоками в Java. Он позволяет создавать пулы потоков с фиксированным или динамическим количеством потоков, запускать задачи на выполнение, управлять их выполнением и получать результаты выполнения.

Основное применение ExecutorService - это параллельное выполнение задач, что позволяет ускорить выполнение программы и повысить ее производительность. С помощью ExecutorService можно легко запустить несколько задач на выполнение параллельно, что позволит сократить время выполнения программы.

Некоторые функции ExecutorService, такие как schedule, scheduleAtFixedRate и scheduleWithFixedDelay, позволяют запускать задачи по расписанию. Это может быть полезно для выполнения регулярных задач, например, для обновления информации в базе данных или для отправки уведомлений.

ExecutorService также предоставляет методы для управления жизненным циклом потоков, такие как shutdown и shutdownNow, которые позволяют корректно завершить работу потоков при окончании работы программы.

В целом, ExecutorService является очень полезным инструментом для управления потоками в Java, который позволяет легко создавать и управлять пулами потоков, запускать задачи на выполнение и получать результаты выполнения.
ExecutorService - это интерфейс в Java, который предоставляет функциональность для управления потоками. Ниже перечислены наиболее часто используемые методы этого интерфейса:

1. execute(Runnable command) - запускает задание на выполнение в одном из потоков из пула.

2. submit(Callable<T> task) - отправляет задачу на выполнение и возвращает объект Future, который можно использовать для получения результата выполнения задачи.

3. submit(Runnable task) - отправляет задачу на выполнение и возвращает объект Future, который можно использовать для проверки статуса выполнения задачи.

4. shutdown() - останавливает прием новых задач и завершает все ранее отправленные задачи.

5. shutdownNow() - прерывает работу всех потоков в пуле и останавливает выполнение всех задач.

6. awaitTermination(long timeout, TimeUnit unit) - блокирует текущий поток до тех пор, пока все задачи не будут завершены или не пройдет указанный таймаут.

7. isShutdown() - возвращает true, если ExecutorService был остановлен методом shutdown().

8. isTerminated() - возвращает true, если все задачи были завершены и ExecutorService был остановлен.

9. invokeAll(Collection<? extends Callable<T>> tasks) - отправляет все задачи на выполнение и возвращает список объектов Future, которые можно использовать для получения результатов выполнения задач.

10. invokeAny(Collection<? extends Callable<T>> tasks) - отправляет все задачи на выполнение и возвращает результат выполнения первой завершившейся задачи.

11. newFixedThreadPool(int nThreads) - создает пул потоков с фиксированным количеством потоков.

12. newCachedThreadPool() - создает пул потоков с динамическим количеством потоков.

13. newSingleThreadExecutor() - создает пул потоков с одним потоком.

14. newScheduledThreadPool(int corePoolSize) - создает пул потоков, который может запускать задачи по расписанию.

15. schedule(Callable<V> callable, long delay, TimeUnit unit) - запускает задачу через указанный промежуток времени и возвращает объект Future, который можно использовать для получения результата выполнения задачи.

16. scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) - запускает задачу по расписанию с фиксированным интервалом между запусками.

17. scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) - запускает задачу по расписанию с фиксированным интервалом между завершением предыдущей задачи и началом следующей.









CompletableFuture - это очень полезный инструмент для разработки многопоточных приложений в Java. Он позволяет асинхронно
выполнить операции и обрабатывать результаты, что может значительно ускорить работу приложения и повысить его производительность.

Применение CompletableFuture может быть особенно полезным в случаях, когда нужно выполнить несколько операций параллельно
и объединить результаты в один. Например, если нужно загрузить данные из нескольких источников и объединить их в один список или объект.

Функции CompletableFuture могут быть использованы для обработки результатов выполнения задачи, как синхронно, так и асинхронно.
Это позволяет более гибко управлять процессом выполнения задачи и обработки результатов.

Некоторые из наиболее часто используемых функций CompletableFuture включают в себя thenApply(), который позволяет преобразовать результат выполнения задачи с помощью функции, и thenCompose(), который позволяет объединить несколько задач в цепочку, где результат одной задачи передается в качестве входного параметра для следующей задачи.

Также CompletableFuture предоставляет функции для обработки исключений, проверки статуса выполнения задачи, отмены выполнения задачи и многое другое.

В целом, CompletableFuture является очень полезным инструментом для разработки многопоточных приложений в Java и может помочь ускорить работу приложения и повысить его производительность.

CompletableFuture - это класс в Java, который предоставляет возможность асинхронного выполнения операций и обработки результатов. Вот некоторые из наиболее активно используемых функций для CompletableFuture:

1. thenApply() - позволяет преобразовать результат выполнения задачи с помощью функции, которую можно передать в качестве параметра.

2. thenAccept() - позволяет обработать результат выполнения задачи без возвращения значения.

3. thenRun() - позволяет выполнить определенную задачу после завершения предыдущей задачи, но без доступа к результату.

4. thenCompose() - позволяет объединить несколько задач в цепочку, где результат одной задачи передается в качестве входного параметра для следующей задачи.

5. exceptionally() - позволяет обработать исключение, возникшее при выполнении задачи.

6. handle() - позволяет обработать результат выполнения задачи или исключение, которое может возникнуть при ее выполнении.

7. allOf() - позволяет объединить несколько CompletableFuture в один, который завершится только тогда, когда все CompletableFuture завершат свою работу.

8. anyOf() - позволяет объединить несколько CompletableFuture в один, который завершится тогда, когда любой из CompletableFuture завершит свою работу.

9. complete() - позволяет завершить CompletableFuture с определенным значением.

10. cancel() - позволяет отменить выполнение задачи.

11. isDone() - позволяет проверить, завершилась ли задача.

12. get() - позволяет получить результат выполнения задачи, но блокирует текущий поток до тех пор, пока результат не будет получен.

13. getNow() - позволяет получить результат выполнения задачи, если он доступен, но не блокирует текущий поток, если результат еще не готов.

14. runAsync() - позволяет выполнить задачу асинхронно в отдельном потоке.

15. supplyAsync() - позволяет выполнить задачу асинхронно в отдельном потоке и вернуть результат выполнения.

В целом, CompletableFuture предоставляет множество функций для асинхронного выполнения операций и обработки результатов, что делает его очень полезным инструментом для разработки многопоточных приложений в Java.